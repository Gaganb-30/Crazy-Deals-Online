// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id      Int     @id @default(autoincrement())
//   email   String  @unique
//   name    String?
//   phone   String
//   address String
//   books   Book[]
// }

// model Book {
//   id        Int           @id @default(autoincrement())
//   title     String
//   publisher String
//   language  String
//   price     Float
//   available Boolean       @default(true)
//   about     String?
//   format    String
//   user      User          @relation(fields: [userId], references: [id])
//   userId    Int           @unique
//   details   bookdetails[]
// }

// model bookdetails {
//   isbn    String @id
//   pages   Int
//   country String
//   book    Book   @relation(fields: [bookid], references: [id])
//   bookid  Int    @unique
// }

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  password String
  name     String?
  role     String  @default("USER")
  phone    String
  address  String
  cart     Cart? // each user has one cart
}

model Book {
  id        Int           @id @default(autoincrement())
  title     String
  publisher String
  language  String
  price     Float
  available Boolean       @default(true)
  about     String?
  format    String
  details   bookdetails[]
  cartItems CartItem[] // many carts can contain same book
}

model bookdetails {
  isbn    String @id
  pages   Int
  country String
  book    Book   @relation(fields: [bookid], references: [id])
  bookid  Int    @unique
}

// Each user has one cart
model Cart {
  id     Int        @id @default(autoincrement())
  user   User       @relation(fields: [userId], references: [id])
  userId String     @unique
  items  CartItem[]
}

// Join table for cart <-> books with quantity
model CartItem {
  id       Int  @id @default(autoincrement())
  cart     Cart @relation(fields: [cartId], references: [id])
  cartId   Int
  book     Book @relation(fields: [bookId], references: [id])
  bookId   Int
  quantity Int  @default(1)

  @@unique([cartId, bookId]) // prevents duplicate book in same cart
}
