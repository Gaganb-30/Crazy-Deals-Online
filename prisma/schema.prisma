// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  password String
  name     String?
  role     String  @default("USER")
  phone    String
  address  String
  cart     Cart?
  orders   Order[]
}

model Book {
  id         Int           @id @default(autoincrement())
  title      String
  publisher  String
  language   String
  price      Float
  available  Boolean       @default(true)
  about      String?
  format     String
  details    bookdetails[]
  cartItems  CartItem[]
  orderItems OrderItem[]
}

model bookdetails {
  isbn    String @id
  pages   Int
  country String
  book    Book   @relation(fields: [bookid], references: [id])
  bookid  Int    @unique
}

model Cart {
  id     Int        @id @default(autoincrement())
  user   User       @relation(fields: [userId], references: [id])
  userId String     @unique
  items  CartItem[]
}

model CartItem {
  id       Int  @id @default(autoincrement())
  cart     Cart @relation(fields: [cartId], references: [id])
  cartId   Int
  book     Book @relation(fields: [bookId], references: [id])
  bookId   Int
  quantity Int  @default(1)

  @@unique([cartId, bookId])
}

model Order {
  id               String        @id @default(uuid())
  user             User          @relation(fields: [userId], references: [id])
  userId           String
  items            OrderItem[]
  totalAmount      Float
  status           OrderStatus   @default(PENDING)
  paymentId        String? // Razorpay payment ID
  paymentOrderId   String? // Razorpay order ID
  paymentSignature String? // Razorpay signature
  paymentStatus    PaymentStatus @default(PENDING)
  shippingAddress  String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model OrderItem {
  id       Int    @id @default(autoincrement())
  order    Order  @relation(fields: [orderId], references: [id])
  orderId  String
  book     Book   @relation(fields: [bookId], references: [id])
  bookId   Int
  quantity Int
  price    Float // Store price at time of order

  @@unique([orderId, bookId])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
